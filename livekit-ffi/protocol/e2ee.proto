// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package livekit.proto;
option csharp_namespace = "LiveKit.Proto";

enum EncryptionType {
    None = 0;
    Gcm = 1;
    Custom = 2;
}

message KeyProviderOptions {
    uint32 ratchet_window_size = 1;
    bytes ratchet_salt = 2;
    bytes uncrypted_magic_bytes = 3;
}

message E2EEOptions {
  bool enabled = 1;
  bool is_shared_key = 2;
  string shared_key = 3;
  KeyProviderOptions key_provider_options = 4;
}

enum E2EEState {
    NEW = 0;
    OK = 1;
    ENCRYPTION_FAILED = 2;
    DECRYPTION_FAILED = 3;
    MISSING_KEY = 4;
    KEY_RATCHETED = 5;
    INTERNAL_ERROR = 6;
}

message E2EEManagerSetEnabledRequest {
    uint64 async_id = 1;
    uint64 room_handle = 2;
    bool enabled = 3;
}

message E2EEManagerSetEnabledResponse {
    uint64 async_id = 1;
}

message E2EEManagerSetSharedKeyRequest {
    uint64 async_id = 1;
    uint64 room_handle = 2;
    bool enable_shared_key = 3;
    string shared_key = 4;
}

message E2EEManagerSetSharedKeyResponse {
    uint64 async_id = 1;
}

message E2EEManagerGetFrameCryptorsRequest {
    uint64 async_id = 1;
    uint64 room_handle = 2;
}

message FrameCryptor {
    string participant_id = 1;
    EncryptionType encryption_type = 2;
    int32 key_index = 3;
    bool enabled = 4;
}

message E2EEManagerGetFrameCryptorsResponse {
    uint64 async_id = 1;
    repeated FrameCryptor frame_cryptors = 2;
}

message FrameCryptorSetEnabledRequest {
    uint64 async_id = 1;
    uint64 room_handle = 2;
    string participant_id = 3;
    bool enabled = 4;
}

message FrameCryptorSetEnabledResponse {
    uint64 async_id = 1;
}

message FrameCryptorSetKeyRequest {
    uint64 async_id = 1;
    uint64 room_handle = 2;
    string participant_id = 3;
    string key = 4;
    int32 key_index = 5;
}

message FrameCryptorSetKeyResponse {
    uint64 async_id = 1;
}

message FrameCryptorRachetKeyRequest {
    uint64 async_id = 1;
    uint64 room_handle = 2;
    string participant_id = 3;
    int32 key_index = 4;   
}

message FrameCryptorRachetKeyResponse {
    uint64 async_id = 1;
    bytes new_key = 2;
}

message FrameCryptorExportKeyRequest {
    uint64 async_id = 1;
    uint64 room_handle = 2;
    string participant_id = 3;
    int32 key_index = 4;
}

message FrameCryptorExportKeyResponse {
    uint64 async_id = 1;
    bytes key = 2;
}

message E2EERequest {
    oneof message {
        E2EEManagerSetEnabledRequest e2ee_manager_set_enabled = 1;
        E2EEManagerSetSharedKeyRequest e2ee_manager_set_shared_key = 2;
        E2EEManagerGetFrameCryptorsRequest e2ee_manager_get_frame_cryptors = 3;
        FrameCryptorSetEnabledRequest frame_cryptor_set_enabled = 4;
        FrameCryptorSetKeyRequest frame_cryptor_set_key = 5;
        FrameCryptorRachetKeyRequest frame_cryptor_rachet_key = 6;
        FrameCryptorExportKeyRequest frame_cryptor_export_key = 7;
    }
}

message E2EEResponse {
    oneof message {
        E2EEManagerSetEnabledResponse e2ee_manager_set_enabled = 1;
        E2EEManagerSetSharedKeyResponse e2ee_manager_set_shared_key = 2;
        E2EEManagerGetFrameCryptorsResponse e2ee_manager_get_frame_cryptors = 3;
        FrameCryptorSetEnabledResponse frame_cryptor_set_enabled = 4;
        FrameCryptorSetKeyResponse frame_cryptor_set_key = 5;
        FrameCryptorRachetKeyResponse frame_cryptor_rachet_key = 6;
        FrameCryptorExportKeyResponse frame_cryptor_export_key = 7;
    }
}
