// Copyright 2023 LiveKit, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package livekit.proto;
option csharp_namespace = "LiveKit.Proto";

enum EncryptionType {
    None = 0;
    Gcm = 1;
    Custom = 2;
}

message KeyProviderOptions {
    uint32 ratchet_window_size = 1;
    bytes ratchet_salt = 2;
    bytes uncrypted_magic_bytes = 3;
}

message E2EEOptions {
  bool enabled = 1;
  bool is_shared_key = 2;
  string shared_key = 3;
  KeyProviderOptions key_provider_options = 4;
}

enum E2EEState {
    NEW = 0;
    OK = 1;
    ENCRYPTION_FAILED = 2;
    DECRYPTION_FAILED = 3;
    MISSING_KEY = 4;
    KEY_RATCHETED = 5;
    INTERNAL_ERROR = 6;
}

message E2EEManagerEnableRequest {
    uint64 room_handle = 1;
    bool enabled = 2;
}

message E2EEManagerEnableResponse {}

message GetFrameCryptorsRequest {
    uint64 room_handle = 1;
}

message FrameCryptor {
    string participant_id = 1;
    EncryptionType encryption_type = 2;
    int32 key_index = 3;
    bool enabled = 4;
}

message GetFrameCryptorsResponse {
    repeated FrameCryptor frame_cryptors = 1;
}

message SetFrameCryptorRequest {
    uint64 room_handle = 1;
    string participant_id = 2;
    bool enabled = 3;
}

message SetFrameCryptorResponse {}

message SetSharedKeyRequest {
    uint64 room_handle = 1;
    bool enable_shared_key = 2;
    string shared_key = 3;
}

message SetSharedKeyResponse {}

message SetKeyForParticipantRequest {
    uint64 room_handle = 1;
    string participant_id = 2;
    string key = 3;
    int32 key_index = 4;
}

message SetKeyForParticipantResponse {}

message RachetKeyForParticipantRequest {
    uint64 room_handle = 1;
    string participant_id = 2;
    int32 key_index = 3;
}

message RachetKeyForParticipantResponse {
    bytes new_key = 1;
}

message E2EERequest {
    oneof message {
        E2EEManagerEnableRequest e2ee_manager_enable = 1;
        GetFrameCryptorsRequest get_frame_cryptors = 2;
        SetFrameCryptorRequest set_frame_cryptor = 3;
        SetSharedKeyRequest set_shared_key = 4;
        SetKeyForParticipantRequest set_key_for_participant = 5;
        RachetKeyForParticipantRequest rachet_key_for_participant = 6;
    }
}

message E2EEResponse {
    oneof message {
        E2EEManagerEnableResponse e2ee_manager_enable = 1;
        GetFrameCryptorsResponse get_frame_cryptors = 2;
        SetFrameCryptorResponse set_frame_cryptor = 3;
        SetSharedKeyResponse set_shared_key = 4;
        SetKeyForParticipantResponse set_key_for_participant = 5;
        RachetKeyForParticipantResponse rachet_key_for_participant = 6;
    }
}