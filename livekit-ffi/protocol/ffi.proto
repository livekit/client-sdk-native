syntax = "proto3";

package livekit;
option csharp_namespace = "LiveKit.Proto";

import "handle.proto";
import "track.proto";
import "room.proto";
import "participant.proto";

/// This is the input of livekit_ffi_request function
message FFIRequest {
  oneof message {
    InitializeRequest initialize = 1;
    // Stop all rooms synchronously (Do we need async here?).
    // e.g: This is used for the Unity Editor after each assemblies reload.
    DisposeRequest dispose = 2;
    ConnectRequest async_connect = 3;
    DisconnectRequest async_disconnect = 4;
    ToI420Request to_i420 = 5;
    ToARGBRequest to_argb = 6;
    AllocBufferRequest alloc_buffer = 7;
    NewVideoStreamRequest new_video_stream = 8;
    NewVideoSourceRequest new_video_source = 9;
    PushVideoFrameRequest push_video_frame = 10;
  }
}

/// This is the output of livekit_ffi_request function.
/// The message field is mostly used to send result of a synchronous operation
/// to the foreign language.
message FFIResponse {
  optional uint64 async_id = 1;
  oneof message {
    ToI420Response to_i420 = 2;
    AllocBufferResponse alloc_buffer = 3;
    NewVideoStreamResponse new_video_stream = 4;
    NewVideoSourceResponse new_video_source = 5;
  }
}

/// This message is used to receive the result of asynchronous requests
/// Or to receive events of a Room
message FFIEvent {
  // Used if the message is used to send the async result to the foreign
  // language
  optional uint64 async_id = 1;
  oneof message {
    ConnectResponse connect = 2;
    RoomEvent room_event = 3;
    TrackEvent track_event = 4;
    ParticipantEvent participant_event = 5;
  }
}

// Setup the callback where the foreign language can receive events
// and responses to asynchronous requests
message InitializeRequest { uint64 event_callback_ptr = 1; }

message DisposeRequest {}

message ConnectRequest {
  string url = 1;
  string token = 2;
  RoomOptions options = 3;
}

message DisconnectRequest { string room_sid = 1; }

message ToI420Request {
  oneof from {
    ARGBBufferInfo argb = 1;
    FFIHandleId buffer = 2;
  }
}

message ToARGBRequest {
  FFIHandleId buffer = 1;
  uint64 dst_ptr = 2;
  VideoFormatType dst_format = 3;
  uint32 dst_stride = 4;
  uint32 dst_width = 5;
  uint32 dst_height = 6;
}

/// Only I420Buffer is supported atm
message AllocBufferRequest {
  VideoFrameBufferType type = 1;
  uint32 width = 2;
  uint32 height = 3;
}

message NewVideoStreamRequest {
  string track_sid = 1;
  VideoStreamType type = 2;
}

message NewVideoSourceRequest {}

message PushVideoFrameRequest {
  VideoFrameInfo frame = 1;
  VideoFrameBufferInfo buffer = 2;
}

// Responses

message ToI420Response { VideoFrameBufferInfo buffer = 1; }

message AllocBufferResponse { VideoFrameBufferInfo buffer = 1; }

message NewVideoStreamResponse { VideoStreamInfo stream = 1; }

message NewVideoSourceResponse { VideoSourceInfo source = 1; }

message ConnectResponse {
  bool success = 1;
  optional RoomInfo room = 2;
}
