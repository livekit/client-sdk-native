# Copyright 2023 LiveKit, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: FFI
on:
  push:
    branches: ["main"]
  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            dylib: livekit_ffi.dll
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            dylib: livekit_ffi.dll
            # due to ring 0.16 compatibilities with win aarch64, we need to use native-tls instead of rustls
            buildargs: --no-default-features --features "native-tls" 
            target: aarch64-pc-windows-msvc
          - os: macos-latest
            dylib: liblivekit_ffi.dylib
            target: x86_64-apple-darwin
          - os: macos-latest
            dylib: liblivekit_ffi.dylib
            target: aarch64-apple-ios
          - os: macos-latest
            dylib: liblivekit_ffi.dylib
            target: aarch64-apple-ios-sim
          - os: macos-latest
            dylib: liblivekit_ffi.dylib
            target: aarch64-apple-darwin
          - os: ubuntu-20.04
            dylib: liblivekit_ffi.so
            target: x86_64-unknown-linux-gnu
          - os: buildjet-4vcpu-ubuntu-2004-arm
            dylib: liblivekit_ffi.so
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-20.04
            dylib: liblivekit_ffi.so
            target: aarch64-linux-android
          - os: ubuntu-20.04
            dylib: liblivekit_ffi.so
            target: armv7-linux-androideabi
          - os: ubuntu-20.04
            dylib: liblivekit_ffi.so
            target: x86_64-linux-android

    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup vars
        id: setup
        run: |
          echo "ZIP=liblivekit_ffi-${{ matrix.target }}.zip" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Info
        run: |
          echo "OutZip: ${{ steps.setup.outputs.ZIP }}"

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install linux dependencies
        if: ${{ matrix.os == 'ubuntu-20.04' && matrix.target != 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt update -y
          sudo apt install -y libssl-dev libx11-dev libgl1-mesa-dev libxext-dev

      - name: Set up QEMU
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (Cargo)
        if: ${{ !contains(matrix.target, 'android') && matrix.target != 'aarch64-unknown-linux-gnu' }}
        run: | 
          cd livekit-ffi/
          cargo build --release --target ${{ matrix.target }} ${{ matrix.buildargs }}

      - name: Build (Docker)
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          docker buildx create --use
          docker buildx build --platform linux/arm64 --load -t lk-arm64:latest -f .github/aarch64-docker.dockerfile .
          docker run --rm -v "$(pwd)":/usr/src/app -w /usr/src/app lk-arm64:latest sh -c 'cd livekit-ffi && cargo build --release --target aarch64-unknown-linux-gnu ${{ matrix.buildargs }}'

      - name: Build (Android)
        if: ${{ contains(matrix.target, 'android') }}
        run: |
          cd livekit-ffi/
          cargo install cargo-ndk
          cargo ndk --target ${{ matrix.target }} build --release ${{ matrix.buildargs }} 

      - name: Zip artifact (Unix)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          cd target/${{ matrix.target }}/release/
          zip ${{ github.workspace }}/${{ steps.setup.outputs.ZIP }} ${{ matrix.dylib }}

      - name: Zip artifact (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          cd target/${{ matrix.target }}/release/
          Compress-Archive -Path ${{ matrix.dylib }} -DestinationPath  ${{ github.workspace }}\${{ steps.setup.outputs.ZIP }}

      # doublezip here but I don't think there is an alternative
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.setup.outputs.ZIP }}
          path: ${{ steps.setup.outputs.ZIP }}
